<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../../css/style.css">
	<title>Переменные</title>
</head>
<body>
<div class="container">
	<div class="row">
		<h1> 
			Переменные 			
		</h1>
		<p>
			Представьте, что есть задача: нужно напечатать фразу "<i>Hello, World!</i>" два раза или даже десять раз. Задачу можно решить и так: 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r('Hello, World!');</span><br>
			<span>print_r('Hello, World!');</span><br>
		</div>
	</div>
	<div>
		<p>
			В простейшем случае - так можжно поступить. Но если фраза <i>Hello, World!</i> начнет повтоярться чаще, да и в разных частях программы, то придется ее везде повторять. Проблемы с таким подходом начнутся тогда, когда понадобится изменить фразу, а такое может быть часто. Придется поменять эту фразу ко всех места, а при этом их еще надо найти. А можно поступить иначе. Вместо копирования выражения достаточно создать переменну с этой фразой.
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>$helloWorld = 'Hello, World!';</span><br>
			<span>print_r($helloWorld);</span><br>
			<span>print("\n");</span><br>
			<span>print_r($helloWorld);</span><br>
		</div>
		<p>
			Разберемся в написанном. В строчке <span class="spanWarning">$helloWorld = 'Hello, World!'</span> происходит следующие - присваивается значение 'Hello, World!' переменной с именем $helloWorld. Знак равенства - это оператор присваивания. В PHP имена переменных начинаются со знака <i>$</i>. В итоге переменная указывает на данные, которые в ней записаны. <br>
			Когда переменная создана, можно начать ее использовать. Она продставляется к те места, где раньше стояла фраза. Во время выполнения интерпретатора (программа, которая выполняет код на PHP), доходит до строчки <span class="spanWarning">print_r($helloWorld);</span> и подставляет вместо переменной ее содержимое, а затем выполняет код.<br>
			Для имен переменных используется любой набор допустимых символов, к которым относятся буквы английского алфавита, цифра и знак _. При этом цифру нельзя использовать в начале. Имена переменных регистрозависимы, то есть имя <span class="spanWarning">hello</span> и <span class="spanWarning">Hello</span> - два разные имени, а значит - две переменные. Регистр в PHP имеет важное значение, никогда об этом забывать нельзя.  <br>
			Количество создаваемых переменных никак не ограничено, большие программы содержат десятки и сотни тысяч имен переменных. Для удобства анализа программы переменные принято создавать как можно ближе к тому месту, где они используются.
 		</p>
 	</div>
 	<div>
 		<h1>
 			Изменение переменной
 		</h1>
 		<p>
 			Само слово "переменная", говорит, что ее можно менять. И действительно, с течением времени внутри программы значение переменных могут меняться:
 		</p>

 		<div>
			<span>&lt;?php</span><br>
			<span>$helloWorld = 'Hello, World!';</span><br>
			<span>print_r($helloWorld);// => Hello, World!</span><br>
			<span>print("\n");</span><br><br>
			<span>$helloWorld = 'Привет, Мир!' </span><br>
			<span>print_r($helloWorld); // => Привет, Мир!</span><br>
		</div>

		<p>
			Имя осталось тем же, но внетри другие данные. Следует заметить, что переменные в PHP не требуют специального объявления. Вместо этого переменная объявляется при првом ее использовании в программе. <br>
			Переменные - мощная, и в то же время опасная вещь. Никогда нельзя быть точно уверенным, что внутри нее записано, не анализировав код, который находится перед переменной. Именно этим и занимаются разработчики во время отдалки, когда пытаются разобраться, почему программа не работает, или работает не так, как задумано. Как вы увидите позже, в PHP есть не только переменные. Более того, переменные не так часто используются с целью их менять. Намного чаще их используют с целью хранить.
		</p>
 	</div>
 	<div>
 		<h1>
 			Ошибки при работе с переменными
 		</h1>
 		<p>
 			Главное правило - переменная должна быть объявлена до ее использования. Если сделать это после - программа работать не будет. 
 		</p>

 		<div>
			<span>&lt;?php</span><br>
			<span>print_r($helloWorld);</span><br>
			<span>$helloWorld = 'Hello, World!';</span>
		</div>
		<p>
			Запуск программы выше завершится ошибкой <i>PHP Notice</i> - ошибка обращения. Она означает, что в коде используется имя (говорят идентификатор), который не определен. Причем в самой ошибке явно указан идентификатор переменной <i>helloWorld</i>. Кроме неправильного порядка определения, в PHP встречаются банальные опечатки - как при использовании переменной, так и во время ее объявления. Количетво подобных ошибок уменьшается за счет использования правильно настроенного редактора. Такой редактор подсвечивает имена, который используются без объявления, и предупреждает о возможных ошибках. 
		</p>
 	</div>
 	<div>
 		<h1>
 			Константы
 		</h1>
 		<p>
 			Некоторые данные, такие как математические постоянные, никогда не меняются. Возьмем число &pi;, которое приблизительно равно <span class="spanWarning"> 3.14</span> и никогда не меняется. Для обращения к подобного рода данным принятия использовать константы. 
 		</p>
 		<div>
			<span>&lt;?php</span><br>
			<span>const PI = 3.14;</span><br>
			<span>print_r($PI); // => 3.14</span>
		</div>
			<p>
				Создание констант отличается от создания переменной. Оно начинается с ключевого слова <span class="spanWarning"> const </span> и последующего имени константы. При этом знак доллара не нужен. Далее константе присваивается значение. Константы приняти именовать буквами в верхнем регистре и <span class="spanWarning"> _ </span> в качестве разделителя. Константа, как и переменная, может применяться в любом вырадении. Единственное ограничение - константу нельзя изменить. В PHP много встроенных констант, которые могут применяться в любом месте программы. Например:
			</p>
				<ul>
					<li>
						<span class="spanWarning">PHP_VERSION </span> - текущая версия PHP
					</li>
					<li>
						<span class="spanWarning">PHP_OS</span> - операционная система, под которую собирался PHP
					</li>
				</ul>
			<p> 
				Кроме обычных констант в PHP существует еще отдельная группа <b>магических констант</b>. Их отличия заключаются в том, что:
			</p>
				<ul>
					<li>
						Эти константы невозможно определить самому, можно только пользоваться существующими;
					</li>
					<li>
						Эти константы начинаются и заканчиваются символами <span class="spanWarning"> __ </span> (двойное подчеркиваение);
					</li>
					<li>
						Их магия заключается в том, что такие константы имеют одно и то же значение только в пределах определенной части программы.
					</li>
				</ul>
			<p>
				Последний пункт интересный. Если это - константы, то как их значения могут меняться? Эти константы не очень постоянно, но их изменения четко регламентированы и на практике не вызывают проблем. К подобным константам относятся :
			</p>
				<ul>
					<li>
						<span class="spanWarning">__LINE__</span> - содержит текущую строку файла, в котором она используется;
					</li>
					<li>
						<span class="spanWarning"> __DIR__ </span> - путь до директории, в которой находитс текущий файл;
					</li>
					<li>
						<span class="spanWarning">__FILE__</span> - путь до файла.
					</li>
				</ul>
 	</div>
 	<div>
 		<h1>
 			HEREDOC
 		</h1>
 		<p>
 			Определять строки в PHP с помощью специального heredoc-синтаксиса. После оператора <span class="spanWarning"> <<< </span> необходимо указать идентификатор с произвольным именем, затем перевод строки и саму строку. В конце добавить тот же идентификатор и закрывающий вставку. Такой способ удобен для задания длинных строк, внетри которых встречаются переводы строк, разнотипные кавычки.
 		</p>

 		<div>
			<span>&lt;?php</span><br>
			<span>$str = &lt;&lt;&lt;TEST </span><br>
			<span>Пример строки, которая </span><br>
			<span>охватывает несколько строк и</span><br>
			<span>в которой используется heredoc-синтаксис.</span><br>
			<span>Здесь не нужно экранировать ни одинарные, ни двойные кавычки.</span><br>
			<span>TEST;</span><br>
			<span>print_r($str); </span><br><br>

			<span>// => Пример строки, которая </span><br>
			<span>// => охватывает несколько строк и</span><br>
			<span>// => в которой используется heredoc-синтаксис.</span><br>
			<span>//=> Здесь не нужно экранировать ни одинарные, ни двойные кавычки.</span><br>
		</div>
 	</div>
 	<div>
 		<p>
 			Стоит обратить внимание на то, что перед закрывабщим идентификатором (в данном случае <span class="spanWarning">TEST</span>) не должно быть пробелом, иначе PHP будет ругаться на ошибку синтаксиса.
 		</p>
 	</div>
</div>
</body>
</html>

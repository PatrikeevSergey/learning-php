<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../../css/style.css">
	<title>Типы данных</title>
</head>
<body>
<div class="container">
	<div class="row">
		<div>
			<h1>
				Типы данных
			</h1>
		</div>
		<div>
			<p>
				Бывают разные способоы представлять данные в программах. Есть строки - набор символов в кавычках, вроде "Hello, World!". Есть целый числа - например, 10, -1, 0. Это две разные категории информации - два разных типа данных.<br>
				Операции умножения имеет смысл для целых чисел, но не имеет смысла для строк. Умножить слово "Клавиатура" на слово "Код" - бессмыслица. Тип данных определяет, что можно делать с элементами конкретного множества элементов. <br>
				Язык программирования распознает типы. Поэтому PHP не позволит умножить строку на строку. Но позволит умножить целое число на другое целое число. Наличие типов и таких ограничений в языке защищает программы от случайных ошибок.<br>
				В отличие от строк, числа оборачивать в кавычки не нужно. Чтобы напечатать число достаточно написать 
			</p>

			<div>
				<span>&lt;?php</span><br>
				<span>print_r(2);</span>
			</div>
			<p> 
				Стоит обратить внимание, что число <span class="spanWarning">2</span> и строка <span class="spanWarning">'5'</span> - совершенно разные вещи, хотя вывод у <span class="spanWarning">print_r</span> для этих данных идентичный. <br>
				Целый числа (<span class="spanWarning">1, 5, 9, -123</span> и т.д.) и рациональные числа (<span class="spanWarning">1.36, 5.0, -123.456</span> и т.д.) - это два отдельных <b>типа данных</b>. Такое разделение связано с особенностями устройства компьютеров. <b>Есть и другие типы</b> данных, с которыми познакомимся позже. Пример с рациональным числом:
			<div>
				<span>&lt;?php</span><br>
				<span>print_r(2.347);</span>
			</div>
 			</p>
 			<p>
 				Типы данных "строка", "целое число" и "рациональное число" - <i>примитивные</i> типы, они встроены в сам язык PHP. В PHP так же встроены и некоторые составные типы данных, но пока будет работать с примитивами. Программисты могут создавать собственные типы данных. 
 			</p>
 			<p>
 				(По-английски строки в программировании называют "string", а строчки текстовых файлоы - "lines". Например, в коде есть две строчки (lines), и нет никаких строк (string). В русском языке может быть путаница, поэтому во всех укоках будем говорить <b>строка </b> для обозначения типа данных "строка", и <b>строчка</b> для обозначения строчек (lines) в файлах).
 			</p>
		</div>
		<div>
			<h1>
				Слабая типизация
			</h1>
			<p>
				Теперь известно два типа данных: строка и число. Например, можно сложить два числа, потому что операция сложения для типа данных "число". А если, если применить эту операцию не к  двум числам, а к числу и строке?
			</p>
			<div>
				<span>&lt;?php</span><br>
				<span>print_r(2 + '3'); // => 5</span>
			</div>
			<p>	
				Несмотря на то, что <span class="spanWarning"> "3" </span> - строка, а не число, интепретатор php выдаст ответ <span class="spanWarning"> 5 </span>, как если бы мы складывали два числа. Когда PHP видит несоответствие типов он сам пытается преобразовать информацию. В данном случае он преобразовывает строку <span class="spanWarning">'7'</span> в число <span class="spanWarning"> 7 </span>, а потом спокойно складывает <span class="spanWarning"> 2 </span> и <span class="spanWarning"> 3 </span>.
			</p>
			<p>
				Не все языки программирования так делают. PHP - язык со <b>слабой типизацией</b>. Он знает о существовании разных типов (числа, строки и др.), но относится к их использования не очень строго, пвтаясь преобразовать информацию, когда это кажется разумным. В языках со <b>строгой типизацией</b> сложить числа со строкой не получится.
			</p>
			<p>
				PHP был создан для интернета, а в интернете вся информация - строки. Даже если при регистрации вы вводите номер телефона или свой возраст, сервер принимает информацию не как число, а как строки. Поэтому авторы решили, что автоматически преобразовывать типа - правильное и удобное решение.
			</p>
			<p>
				Такое автоматическое и неявное преобразование типов с одной стороны и правда удобно. Но на практике это свойство языка создает много проблем и ошибок, которые трудно найти. Код может работать, а может и нет - все зависит от того, повезло ли в конкретном случае с автоматическим преобразованием. Программист это заметит не сразу. 
			</p>
			<p>
				В дальнейших занятия будем встречаться с таким поведение не раз. Часто будет возникать вопрос "почему мой код работает не так, как я ожидал?".
			</p>
		</div>
		<div>
			<h1>
				Явное преобразование типов
			</h1>
			<p>
				Преобразование типов - частая операция в web - разработке. С одной стороны, для ее выполнения можно полагаться на слабую типизацию, с другой - во многих случая лучше сделать преобразование явнл, используя специальный синтаксис. Такой код понятнее и предсказуемее. 
			</p>
			<div>
				<span>&lt;?php</span><br>
				<span>print_r((string)5); // => 5</span><br>
				<span>print_r((int)'245'); // => 245</span><br>

				<span>//Преобразование типов можно использовать внутри составных вытажений</span><br>
				<span>print_r('This ' . (string) 5); // => This 5</span>
			</div>
			<p>
				Явное преобразование типа работает так: перед значением в скобках указывается желаемый тип. В результате значение справа преобразуется в значение другого типа. <br>
				В более сложных ситуациях встречаются множественные преобразования, например, <span class="spanWarning">(string) (4 + ((int) '8')</span>. Порядок вычисления следующий:
			</p>
			<div>
				<span>&lt;?php</span><br>
				<span>(int) '4'; // 4</span><br>
				<span>5 + 4; // 9</span><br>
				<span>(string) 9; // '9'</span>
			</div>
		</div>
	</div>
</div>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Hexlet. Основы php</title>
	<link rel="stylesheet" type="text/css" href = "../../css/style.css">
</head>
<body>
<div class="container">
<div class = "row">
	<div>
		<h1>
			Арифметические операции
		</h1>
	</div>
	<div>
		<p>
			На базовом уровне компьютеры оперируют только числами. Для сложения двух чилес в математике пишут 1 + 2. В программировании - тоже самое. Пример кода:
		</p>
	</div>
		<div>
			<span>&lt;?php</span><br>
			<span>//не забываем про точку запятой в конце. Каждая строчка - инструкция</span><br>
			<span>1 + 2;</span>
		</div>
		<p>
			Арифметика в программировании практически ничему не отличается от школьной арифметики.
		</p>
		<p>
			Инструкция 1 + 2; заставит интерпретатор сложить два числа и узнать результат. Эта программа будет работать, только в ней нет никакого смысла, потому что по сути <b>не дается команда </b> интерпретатору для вывода результата на экран. По сути, код говорит ему, "смотри, сумма двух чисел". А что делать с ней дальше - интерпретатор не знает. В реальной работе недостаточно сообщить интерпретатору о математическом выражении. Например, при создании интернет - магазина недостаточно просто интерпретатору посчитать стоимость товара в корзине, а нужно посчитать стоимость <b>N</b> товара и показать стоимость пользователю. Пример кода:
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>//не забываем про точку запятой в конце. Каждая строчка - инструкция</span><br>
			<span>print_r(1 + 2);</span> // => 3
		</div>
		<p>
			Кроме сложения доступны так же следующие операции:
			<ul>
				<li>
					* - Умножение 
				</li>
				<li>
					/ - Деление 
				</li>
				<li>
					- - Вычитание 
				</li>
				<li>
					% - Остаток от деления 
				</li>
				<li>
					** - Возведение в степень 
				</li>
			</ul>
		</p>
		<h1>
			Операторы
		</h1>
		<p>
			Знак операции, например +, называется <b>оператором</b>. Операторы выполняют операции над определенными значениями, которые называют <b>операндами</b>. Сами операторы обычно придставлены одним или несколькими символами, реже - словами. Большенство операторов - математические операции. 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(1 <b>+</b> 2);</span> 
		</div>
		<p>
			На примере выше знак <span class="spanWarning">+</span> это оператор, в числа <span class="spanWarning">1</span> и <span class="spanWarning">2</span> - <b>операнды</b>.<br>
			Операции, которые требуют наличия двух операндов, называются <b>бинарными</b>. В слечае сложения у нас есть два операнда: один слева от знака <span class="spanWarning">+</span>, другой - справа. Если приступить хотя бы один операнд (например, <span class="spanWarning">1 +;</span>), то PHP выдаст синтаксическую ошибку. 
		</p>
		<p>
			Операции бывают не только бинарными, но и <b>унарными</b> (с одним операндом), и даже тернарными (с тремя операндами). Причем операторы могут выглядеть одинаково, но обозначать разные операции. Символы <span class="spanWarning">+</span> и <span class="spanWarning">-</span> используются не только как операторы. Когда речь идет про отрицательные числа, то знак минус становится частью числа:
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(-2);</span> 
		</div>
		<p>
			Выше пример применения унарной операции к числу 3. Оператор минус перед тройков говорит интерпретатору взять число 3 и найти противоположное, то есть -3. Это может сбить с толку, потому что -3 - это одновременно и число само по себе, и оператор с операндом, но у языков программирования такая структура. 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(4 + -2);</span> // => 1
		</div>
		<p>
			То же самое, что и 4 - 2 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(+2);</span> // => 2 <br>
			<span>print_r(1 + +3);</span> // => 4 <br>
		</div>
		<p>
			<h1>
				Коммутативная операция 
			</h1>
			<p>
				От перемены мест слагаемых сумма не меняется. Это один из базовых и интуитивно понятных законом арифметики, он называется <b>коммутативным законом</b>. Бинарная операция считается коммуративной, если, поменяв местами операнды, получается тот же самый результат. Очевидно, что сложение - коммутативная операция, например: <i>3 + 2 = 2 + 3</i>
			</p>
			<p>
				Операция вычитания не является коммутативной операцией. <em>2 - 3 &ne; 3 - 2</em>. В программировании этот закон работает точно так же, как в арифметике. Более того, большенство операций,  которые будут в реальной жизни, не являются коммутативными. Отсюда вывод: всегда нужно обращать внимание на то, с чем работать.
			</p>
		</p>
		<p>
			<h1>
				Композиция операций
			</h1>
			<p>
				<div>
					<span>&lt;?php</span><br>
					<span>print_r(2 * 4 * 5 * 10);// 2 * 4 * 5 * 10 = 40 * 10 => 400</span> <br>
				</div>
			</p>
			<p>
				Операции можно соединять друг с другом, получая возможность вычисления все более сложным составные выражения. Такое свойство операций называется композицией. Композиция арифметических операций в программировании аналогична из школьной программы. Композиция операций распространяется на вообще все операции, а не только арифметические. 
			</p>
			<p>
				Чтобы предоставить себе то, как происходят вычисления внутри интерпретатора, разберем пример: <span class="spanWarning">2 * 4 * 5 * 10</span>.
			</p>
			<ol>
				<li>
					Сначала вычислять <span class="spanWarning"> 2 * 4</span> и получается выражение <span class="spanWarning">8 * 5 * 10</span>
				</li>
				<li>
					Затем <span class="spanWarning">8 * 5</span>. В итоге имеем <span class="spanWarning">40 * 10</span>
				</li>
				<li>
					В конце концов происходит последнее умножение, и получается результат <span class="spanWarning">400</span>
				</li>
			</ol>
		</p>
		<p>
			<h1>
				Приоритет операций
			</h1>
		</p>
		<p>
			А если придется вычислять такое выражение - 2 + 2 * 2? 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(2 + 2 * 2); // => 6</span> <br>
		</div>
		<p>
			В школьной программе математики изучалось понятия "Приоритет операции". Приоритет определяет то, в какой последовательности должны выполнять операции. Стоит обратить внимание, что интерпретатор производить арифметические выполнять в правильно порядке: сначала деление, потом умножение; сложение, затем вычитание, а приоритет возведения в степень выше всех остальных арифметических операций <span class="spanWarning">2 ** 3 * 2</span> вычислится в <span class="spanWarning"> 16</span>.
		</p>
		<p>
			Но нередко вычисления должны происходить в порядке, отличном от стандартного приоритета. В сложных ситуациях можно (и нужно) задавать круглыми скобками, точто так же, как в школе, например <span class="spanWarning">(2 + 2) * 2</span>. Скобки можно ставить вокруг любой ситуации. Они могут вкладываться друг в друга сколько угодно раз. Вот пара примеров:
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>print_r(3 ** (4 - 2 )); // => 9</span> <br>
			<span>print_r(7 * 3 + (4 / 2) - (8 + (2 - 1))); // => 14</span> <br>
		</div>
		<p>
			При этом главное соблюдать парность, то есть закрывать скобки в правильном порядке. Это, кстати, часто становится причиной ошибок не только у новечков, но и у опытных программистов. Для удобства ставьте сразу открывающую и закрывающую скобку, а потом писать внутреннюю часть. Редакторы в большенстве других редакторов кода делают автоматически. Это касается и других парных символов, например, ковычек. О них - будущих уроках. 
		</p>
		<p>
			Иногда выражение сложно воспринимать визуально. Тогда можно расставить скобки, не повлияв на приоритет. Запомните: код пишется для людей, потому что код будут читать люди, а машины будут только исполнять его. Для машин код - или корректный или нет, для них нет "более" понятного или "менее" понятного кода. Явная расстановка приоритетов упрощает чтение кода другими разработчиками.
		</p>
<p>
	<a href ="./lesson5.php">Далee</a>
</p>
<p>
	<a href = "../../index.php/">На главную</a>
</p>
</div>
</div>

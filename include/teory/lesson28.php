<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../../css/style.css">
	<title>Цикл While</title>
</head>
<body>
	<div class="container">
		<div class="row">
			<h1>
				Цикл while
			</h1>
			<p>
				Программы, которые пишутся в рамках урока становятся все сложнее и объемнее. Они все еще очень далеки от реальных программ, где количество строк кода измеряется десятками сотнями тысяч, иногда миллионами. Но текущая сложность уже способна заставить напрячься людей без опыта. Начиная с этого урока, мы переходим к новым и самым сложным из базовых тем в программировании - циклам. <br>
				Любые прикладные программы служат прагматичным целям. Они помогают управлять сотрудниками, финансами и т.д. Несмотря на различия, все эти программы выполяют заложенные в них алгоритмы, которые очень похожи между собой. Что это такое? Алгоритм - последовательность действий (инструкций), которая приводит к некоему ожидаемому результату. В принципе, это описание подходит под любую программу, но под алгоритмами обычно понимается что-то специфичное. <br>
				Представим, что есть книга и нужно найти внутри нее какую-то конкретную цитату. Саму цитату знаем, а на какой странице - нет. Как найти нужную страницу? Самый простой (долгий) способ - последовательно просматривать страницы до тех пор, пока мы не найдем нужную. В худшем случае придется пересмотреть все страницы, но результат в конечном итоге мы получим. Именно этот процесс и называется алгоритмом. Он включает в себя логические проверки (нашли ли фразу) и перебор страниц. Количество страниц, которое придется посмотреть, заранее неизвестно, но сам процесс просмотра повтораяется из раза в раз совершенно одинаковым образом. Для выполнения повторящихся действий как раз и нужны циклы. Каждый такой повтор называется итерацией. <br>
				Допустим, необходимо написать функцию, которая выводит на экран все числа от 1 до указанного (через аргументы):
			</p>
		<div>
			<span>&lt;?php</span><br>
			<span>printNumbers(3)</span><br>
			<span>//1</span><br>
			<span>//2</span><br>
			<span>//3</span><br>
		</div>
		<p>
			Эту функцию невозможно реализовать уже изученными средствами, так как количество выводов на экран заранее не иизвестно. А циклами эта не составит никаких проблем:
		<div>
			<span>&lt;?php</span><br>
			<span>function printNumbers($lastNumber) {</span><br>
			<span>&nbsp;&nbsp; // i - сокращение от index (порядковый номер)</span><br>
			<span>&nbsp;&nbsp; // используется по общему согласования во множестве языков</span><br>
			<span>&nbsp;&nbsp; // как счетчик цикла</span><br>
			<span>&nbsp;&nbsp; $i = 1;</span><br>
			<span>&nbsp;&nbsp; while ($i <= $lastNumbers) {</span><br>
			<span>&nbsp;&nbsp;&nbsp;&nbsp;print_r($i);</span><br>
			<span>&nbsp;&nbsp;&nbsp;&nbsp;print_r('\n');</span><br>
			<span>&nbsp;&nbsp;&nbsp;&nbsp;$i = $i + 1;</span><br>
			<span>&nbsp;&nbsp;}</span><br>
			<span>&nbsp;&nbsp;print_r('Конец');</span><br>
			<span>}</span><br><br><br>
			<span>printNumbers(3)</span><br>
			<span>// => 1</span><br>
			<span>// => 2</span><br>
			<span>// => 3</span><br>
			<span>// => Конец</span><br>
		</div>
		</p>
		<p>
			В коде функции использован цикл <span class="spanWarning">while</span>. Он состоиз из трех элементов:
			<ul>
				<li>
					Ключевое слово <span class="spanWarning">while</span>. Несмотря на схожесть с вызовом функции это не вызов функции.
				</li>
				<li>
					Предикат. Условие, которое указывается в скобках после <span class="spanWarning">while</span>. Это условие вычисляется на каждой итерации.
				</li>
				<li>
					Тело цикла. Блок кода в фигурных скобках.
				</li>
			</ul>
		</p>
		<p>
			Конструкция читается так: "делать то, что указано в теле цикла пока истинно условие (предикат) <span class="spanWarning">$i <= $lastNumbers</span>". Разберем работу этого года для вызова <span class="spanWarning">printNumbers(3)</span>:
		<div>
			<span>&lt;?php</span><br>
			<span>// Инициализируется переменная i</span><br>
			<span>$i = 1;</span><br>
			<span>// Предикат возвращает true, поэтому выполняется тело цикла</span><br>
			<span>while (1 <= 3) </span><br>
			<span>// print_r(1);</span><br>
			<span>// $i = 1 + 1;</span><br>
			<span>// Заканчиловаь тело цикла, поэтому происходит возврат в начало</span><br>
			<span>while (2 <= 3) </span><br>
			<span>// print_r(2);</span><br>
			<span>// $i = 2 + 1;</span><br>
			<span>// Заканчиловаь тело цикла, поэтому происходит возврат в начало</span><br>
			<span>while (3 <= 3) </span><br>
			<span>// print_r(3);</span><br>
			<span>// $i = 3 + 1;</span><br>
			<span>// Предикат возвращается false, поэтому выполнение переходит за цикл</span><br>
			<span>while (4 <= 3) </span><br>
			<span>// print_r('Конец');</span><br>
			<span>// На этом этапе i равен 4, но нам уже не нужен</span><br>
			<span>// функция завершается</span><br>
		</div>
		</p>
		<p>
			Самое главное в цикле - завершение его работы (выход из цикла). Процесс, который порождает цикл должен в конце концов остановиться. Ответственность за остановку полностью лежит на программисте. Обычно задача сводится к введению переменной, называемой "счетчиков цикла". Сначала счетчик инициализируется, то есть ему дается начальное значение. В нашем примере это инструкция <span class="spanWarning">$i = 1</span>, выполняемая до входа в цикл. Затем в условии цикла проверяется, достиг ли счетчик своего предельного значение. И, наконец, счетчик меняет свое значение <span class="spanWarning">$i = $i + 1</span>.
		</p>
		<p>
			На этом этапе новички делают больше всего ошибок. Например, случайно забытое увеличие счетчика или неправильная проверка в предикате способны привести к закикливанию. Эта ситуация, при которой цикл работает бесконечно, и программа никогда не остановится. В таком случае приходится ее завершать принудительно. 
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>function printNumbers($lastNumber) {</span><br>
			<span>&nbsp;&nbsp; $i = 1;</span><br>
			<span>&nbsp;&nbsp;// этот цикл никогда не остановит</span><br>
			<span>&nbsp;&nbsp;//и будет печатать всегда одно значение</span><br>
			<span>&nbsp;&nbsp;while ($i <= $lastNumber) {</span><br>
			<span>&nbsp;&nbsp;&nbsp;&nbsp;print_r($i)</span><br>
			<span>&nbsp;&nbsp;}</span><br>
			<span>&nbsp;&nbsp;print_r('Финиш!');</span><br>
			<span>}</span><br>
		</div>
		<p>
			В некоторых случаях бесконечные циклы полезны. Здесь такие случаи рассматривать не будет, но полезно видеть как выглядет этот код:
			<div>
				<span>&lt;?php </span><br>
				<span>while (true) {</span><br>
				<span>&nbsp;&nbsp;//делается что-то полезное</span><br>
				<span>}</span><br>
			</div>
		</p>
		<p>
			Подведем итог, когда нужны циклы, а когда можно обойтись без них? Физически невозможно обойтись без циклов тогда, когда алгоритм решения задачи требует повторения какие-то действий, как в примере с книгой, и каличество этих операций заранее неизвестно.
		</p>
	</div>
	<hr>
	<div class="row">
		<p>
			Модифицировать функцию <span class="spanWarning">printNumbers()</span> так, чтобы она выводила числа в обратном порядке. Для этого нужно идти от верхней границе к нижней. То есть счетчик должен быть инициализирован максимальным значением, а в теле цикла его нужно уменьшать до нижней границы.  
		</p>
	</div>
	<div>
		<?php
			function printNumbers($maxNum){
				$i = 1;
				while ($i <= $maxNum) {
					print $maxNum-- ."<br>";
				}
				print "Finish";
			}
			printNumbers(4);
		?>
	</div>
<a href="./lesson29.php">Далее</a>
</div>
</body>
</html>
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<link rel="stylesheet" type="text/css" href="../../css/style.css">
	<title>Именование</title>
</head>
<body>
<div class="container">
	<div class="row">
		<h1>
			Именование
		</h1>
		<p>
			Допустим есть некая программа:
		<div>
			<span>&lt;?php</span><br>
			<span>$o = 'Отец';</span><br>
			<span>print_r($o);</span><br>
			<span>print_r($o);</span><br>
		</div>
		</p>
		<p>
			Она будет работать, потому что для компьютера и интерпретатора, ошибок нет. Программисты чаще читают код, чем пишут его. Причем читают не только свой, но и чужой. От качества и понятности имен переменных зависит очень много. <br>
			Лучше посидеть и придумать название, которое описывает суть и смысл переменной, чем назвать ее как попало, а в будущем переделывать. Нужно стараться давать им такие имена, чтобы они были максимально понятны без контекста, без изучения окружения кода. <br>
			Среди разработчиков есть шутка, что самое сложно в программировании - названия переменных и инициализация кеша. Придумывать названия и правда сложно. 
		</p>
	</div>
	<div class="row">
		<h1>
			Именование переменных
		</h1>
		<p>
			<span class="spanWarning">$greeting </span> - пример простого имени, но не все имена так просты. Довольно часто они составные, то есть включают в себя несколько слов. Например, имя пользователя. В различных языках применяются разные стили кодирования, и имя переменной будет отличаться. <br>
			В именовании переменных можно выделить три основных подхода, который будут иногда комбинироватся друг с другом. Все они проявляют себя, когда имя переменной систоить из нескольких слов:
			<ul>
				<li>
					kebab-case - составные части переменной разделяются дефисами, пример: <span class="spanWarning">my-new-var</span>;
				</li>
				<li>
					snake_case - для разделения используют подчеркивание, пример: <span class="spanWarning">my_new_var</span>;
				</li>
				<li>
					CamelCase - каждое слово в переменной пишется с заглавной буквы, пример: <span class="spanWarning">MyNewVar</span>;
				</li>
				<li>
					lowerCamelCase - каждое слово в переменной пишется с заглавной буквы, кроме первого, пример: <span class="spanWarning">myNewVar</span>.
				</li>
			</ul>
		</p>
		<p>
			Другое правило гласит - не использовать транслит для имен, только английский язык. Если вдруг есть сложности с английским - пользоваться переводчиков. Со временем, капаясь в чужом коде, сформируется правильное понятие для именования. <br>
			Названия должны не только передавать смысл, но и соответствовать синтаксическим правилам, которые обычно никак не проверяются на уровне языка, но нужны для разработки. Процесс написания программ в современном миру - коллективная работа и для лучшего взаимодействия в команду код пишется в удином стиле, как будто его разрабатывал один человек. В каждом языке есть свои правила. В PHP долгое время творился хаос. Да и сам язык сотках из противоречий, причем не только в названиях. С этим можно столкнуться в следующих уроках и реальной работе. Относительно недавно в  PHP появился общепринятый <a href="#">стандарт кодирования</a>, к которому все так или иначе стремится. Подобный стандартны описывают множество аспектов. Советуем с самого начала заглядывать в стандарт и писать код в соответствии с ним. <br>
			К счастью, сегодня нет необходимости помнить все правила стандарта, потому что существуют специальные программы, которые приверяют автоматически код на соответствие. Такие программы называются <b>линтерами</b>, и когда появится больше опыта, мы их изучим.  
		</p>
	</div>
	<div class="row">
		<h1>
			Именование функций
		</h1>
		<p>
			Стиль именования функций в php такой же, как и стиль именования переменных: <i>lowerCamelCase</i>. При выборе самих слов есть важное отличие. <b>Функция - действие</b>, вызов функции всегда подобен указанию - "сходи", "возьми", "положи", "распечатай". Например, название уже применяемых функций:
			<ul>
				<li>
					<span class="spanWarning">print_r</span>("напечатать");
				</li>
				<li>
					<span class="spanWarning">print_r></span>("subtract - вычесть");
				</li>
				<li>
					<span class="spanWarning">gettype</span>("получить тип");
				</li>
			</ul>
		</p>
		<p>
			<b>Переменная - сущность</b>, поэтому используются существительные:
			<ul>
				<li>
					<span class="spanWarning">$number</span>
				</li>
				<li>
					<span class="spanWarning">$result</span>
				</li>
			</ul>
		</p>
		<p>
			Берите на вооружение: функция - глагол, переменная - существительное. <br>
			Жизнь программиста наполнена такими моментами - открыл свой старый код и попытался понять его. Будьте добрый к себе и к коллегам, давайте понятные названия переменным и функциям.
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>$euroCount = 1000;</span><br>
			<span>$dollarCount = $euroCount * 1.25;</span><br>
			<span>$rublesCount = $dollarCount * 60;</span><br>
			<span>print_r($rublesCount);</span><br>
		</div>
		<p>
			С точки зрения профессиональной разработки - это код очень не очень, или "пахнет". Так описывают код, который не соответствует так называемым лучшим практикам (best practices). И причина здесь вот в чем: уже сейчас, глядя на числа <span class="spanWarning">60 </span> и <span class="spanWarning">1.25</span>, вы скорее всего зададитесь вопросом: "А что это за числа?". А представьте, что будет через месяц! А как его поймет новый программист, не видевший код ранее? В нашем примере контекст восстанавливается благодаря грамотному именованию, но в реальной жизни код значительно сложнее, поэтому догодаться до смысла чисел зачастую невозможно. <br>
			Этот "запах" вызывают магические числа (magic numbers). Числа, происхождение которых невозможно понять без глубого анализа кода. Выход из ситуации прост - достатоно создать переменные с правильными названиями, как все встанет на свои места.
		</p>
		<div>
			<span>&lt;?php</span><br>
			<span>$dollarPerEuro = 1.25;</span><br>
			<span>$rublesPerDollar = 60;</span><br><br>
			<span>$euroCount = 1000;</span><br>
			<span>$dollarCount = $euroCount * $dollarPerEuro;</span><br>
			<span>$rublesCount = $dollarCount * $rublesPerDollar;</span><br>
			<span>print_r($rublesCount);</span><br>
		</div>
		<p>
			Обратите внимание на следующие детали:
			<ul>
				<li>
					Именование lowerCamelCase;
				</li>
				<li>
					Две новые переменные отделены от последующих вычислений пустой строчкой. Эти переменные имею смысл и без вычислений, поэтому такое отделение уместно, чтобы повысить читаемость;
				</li>
				<li>
					Получается хорошо именованный и структурированный код, но длинее прошлой версии. Так часто бывает и это нормально, потому что код должен быть читабельным
				</li>
			</ul>
		</p>
		<hr>
		<p>
			В PHP из языка СИ перекочевала функция <span class="spanWarning">sprintf()</span>. Она создает строку на основе щаблона данных.
			<div>
				<span>&lt;?php</span><br>
				<span>$result = sprintf('Сегодня %s %d', 'Пятница', 8);</span><br>
				<span>print_r($result); // => Сегодня пятница 8</span>
			</div>
		</p>
		<p>
			Первый аргумент в <span class="spanWarning">sprintf()</span> - строка-шаблон, в котором кроме самого текста могут присутствовать специальные запонители. Это "заглушки" для информации, которая передается следующим аргументам. <span class="spanWarning">%s</span> означает "заглушка для строки", <span class="spanWarning">%d </span> - для числа. <br>
			Порядок и тип значения должны совпадать с порядком типом заглушек. При выводе дат иногда требуется фиксированное количество цифр, например, всегда писать нули перед числом, если оно меньше 10.
			<div>
				<span>&lt;?php</span><br>
				<span>$result = sprintf('Сегодня %s %02d', 'Пятница', 8);</span><br>
				<span>print_r($result); // => Сегодня пятница 08</span>
			</div> 
		</p>
		<p>
		<span class="spanWarning">%02d </span> - сделать две цифры и заполнить нулями оставшееся пространство. <span class="spanWarning">%03d</span> - три цифры, и т.д.
		</p>
	</div>
</div>
<br>
<?php
	$result = sprintf('Сегодня - %s - %02d', 'Вторник', 9);
	print $result;

	print '<br>';

	function getFormattedBirthday($day, $month, $year){
		$result = sprintf('%02d-%02d-%d', $day, $month, $year);
		return $result;
	}

	print getFormattedBirthday(5, 2, 1953);
?>
<br>
<a href="./lesson24.php">Далее </a>
</body>
</html>
